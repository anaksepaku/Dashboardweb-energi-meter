#include <PZEM004Tv30.h>
#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <AsyncTCP.h>

// Kredensial WiFi
const char* ssid = "Home";
const char* password = "bayardulu";

// Pin PZEM untuk ESP32 DevKit V1
#define PZEM_RX_PIN 16  // GPIO16
#define PZEM_TX_PIN 17  // GPIO17

// Inisialisasi objects
AsyncWebServer server(80);
PZEM004Tv30 pzem(Serial2, PZEM_RX_PIN, PZEM_TX_PIN);

// Variabel global untuk data sensor
float voltage = 0.0;
float current = 0.0;
float power = 0.0;
float energy = 0.0;
float frequency = 0.0;
float pf = 0.0;

// HTML dengan icons yang diperbaiki
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML>
<html>
<head>
  <title>Energy Meter - ESP32 DevKit V1</title>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    body { 
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
      margin: 0;
      padding: 20px;
      background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
      color: #ffffff;
      min-height: 100vh;
    }
    .container {
      max-width: 1200px;
      margin: 0 auto;
    }
    h1 {
      text-align: center;
      margin-bottom: 30px;
      color: #ffffff;
      text-shadow: 0 2px 10px rgba(0,150,255,0.5);
      font-size: 2.5em;
    }
    .header-subtitle {
      text-align: center;
      color: #4fc3f7;
      margin-bottom: 40px;
      font-size: 1.1em;
    }
    .grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 25px;
      margin-top: 20px;
    }
    .card {
      background: rgba(255, 255, 255, 0.08);
      border-radius: 20px;
      padding: 30px;
      box-shadow: 0 8px 32px rgba(0,0,0,0.3);
      backdrop-filter: blur(12px);
      border: 1px solid rgba(255,255,255,0.1);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      position: relative;
      overflow: hidden;
    }
    .card::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
      transition: left 0.5s;
    }
    .card:hover::before {
      left: 100%;
    }
    .card:hover {
      transform: translateY(-10px) scale(1.02);
      box-shadow: 0 15px 40px rgba(79, 195, 247, 0.3);
      background: rgba(255, 255, 255, 0.12);
    }
    .card-header {
      display: flex;
      align-items: center;
      margin-bottom: 20px;
    }
    .icon {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 20px;
      font-size: 24px;
      background: rgba(79, 195, 247, 0.2);
      border: 2px solid rgba(79, 195, 247, 0.5);
    }
    .icon.voltage { background: rgba(255, 82, 82, 0.2); border-color: rgba(255, 82, 82, 0.5); }
    .icon.current { background: rgba(76, 175, 80, 0.2); border-color: rgba(76, 175, 80, 0.5); }
    .icon.power { background: rgba(255, 193, 7, 0.2); border-color: rgba(255, 193, 7, 0.5); }
    .icon.energy { background: rgba(156, 39, 176, 0.2); border-color: rgba(156, 39, 176, 0.5); }
    .icon.frequency { background: rgba(33, 150, 243, 0.2); border-color: rgba(33, 150, 243, 0.5); }
    .icon.pf { background: rgba(255, 87, 34, 0.2); border-color: rgba(255, 87, 34, 0.5); }
    
    .label {
      font-size: 16px;
      color: #b3e5fc;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 1.5px;
    }
    .value {
      font-size: 32px;
      font-weight: 700;
      color: #ffffff;
      margin: 15px 0;
      text-shadow: 0 2px 8px rgba(0,0,0,0.3);
    }
    .unit {
      font-size: 18px;
      color: #81d4fa;
      margin-left: 8px;
      font-weight: 500;
    }
    .status {
      text-align: center;
      margin-top: 40px;
      padding: 20px;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 15px;
      font-size: 16px;
      border: 1px solid rgba(255,255,255,0.1);
      color: #80deea;
    }
    .loading {
      display: inline-block;
      width: 20px;
      height: 20px;
      border: 3px solid rgba(255,255,255,.3);
      border-radius: 50%;
      border-top-color: #4fc3f7;
      animation: spin 1s ease-in-out infinite;
      margin-right: 10px;
    }
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
  </style>
  <script>
    function updateData() {
      document.getElementById('status').innerHTML = '<div class="loading"></div>Memperbarui data...';
      
      fetch('/data')
        .then(response => {
          if (!response.ok) throw new Error('Network error');
          return response.json();
        })
        .then(data => {
          if(data.error) {
            document.getElementById('status').innerHTML = '‚ùå Error: ' + data.error;
            return;
          }
          
          document.getElementById('voltage').innerHTML = data.voltage + '<span class="unit">V</span>';
          document.getElementById('current').innerHTML = data.current + '<span class="unit">A</span>';
          document.getElementById('power').innerHTML = data.power + '<span class="unit">W</span>';
          document.getElementById('energy').innerHTML = data.energy + '<span class="unit">kWh</span>';
          document.getElementById('frequency').innerHTML = data.frequency + '<span class="unit">Hz</span>';
          document.getElementById('pf').innerHTML = data.pf;
          
          document.getElementById('status').innerHTML = '‚úÖ Data terupdate: ' + new Date().toLocaleTimeString();
        })
        .catch(error => {
          document.getElementById('status').innerHTML = '‚ùå Gagal mengambil data: ' + error.message;
          console.error('Error:', error);
        });
    }
    
    // Update data setiap 2 detik
    setInterval(updateData, 2000);
    
    // Update data pertama kali saat load
    window.addEventListener('load', function() {
      document.getElementById('status').innerHTML = '<div class="loading"></div>Memuat data pertama...';
      setTimeout(updateData, 1000);
    });
  </script>
</head>
<body>
  <div class="container">
    <h1><i class="fas fa-bolt"></i> ENERGY METER</h1>
    <div class="header-subtitle">ESP32 DevKit V1 - Monitoring Daya Listrik Real-time</div>
    
    <div class="grid">
      <!-- Tegangan -->
      <div class="card">
        <div class="card-header">
          <div class="icon voltage">
            <i class="fas fa-bolt"></i>
          </div>
          <div class="label">Tegangan</div>
        </div>
        <div class="value" id="voltage">0.0<span class="unit">V</span></div>
      </div>
      
      <!-- Arus -->
      <div class="card">
        <div class="card-header">
          <div class="icon current">
            <i class="fas fa-wave-square"></i>
          </div>
          <div class="label">Arus</div>
        </div>
        <div class="value" id="current">0.00<span class="unit">A</span></div>
      </div>
      
      <!-- Daya -->
      <div class="card">
        <div class="card-header">
          <div class="icon power">
            <i class="fas fa-plug"></i>
          </div>
          <div class="label">Daya</div>
        </div>
        <div class="value" id="power">0.0<span class="unit">W</span></div>
      </div>
      
      <!-- Energi -->
      <div class="card">
        <div class="card-header">
          <div class="icon energy">
            <i class="fas fa-battery-full"></i>
          </div>
          <div class="label">Energi</div>
        </div>
        <div class="value" id="energy">0.000<span class="unit">kWh</span></div>
      </div>
      
      <!-- Frekuensi -->
      <div class="card">
        <div class="card-header">
          <div class="icon frequency">
            <i class="fas fa-signal"></i>
          </div>
          <div class="label">Frekuensi</div>
        </div>
        <div class="value" id="frequency">0.0<span class="unit">Hz</span></div>
      </div>
      
      <!-- Faktor Daya -->
      <div class="card">
        <div class="card-header">
          <div class="icon pf">
            <i class="fas fa-equals"></i>
          </div>
          <div class="label">Faktor Daya</div>
        </div>
        <div class="value" id="pf">0.00</div>
      </div>
    </div>
    
    <div class="status" id="status">
      <div class="loading"></div>Menyiapkan sistem...
    </div>
  </div>
</body>
</html>
)rawliteral";

void setup() {
  Serial.begin(115200);
  
  // Inisialisasi Serial2 untuk PZEM
  Serial2.begin(9600, SERIAL_8N1, PZEM_RX_PIN, PZEM_TX_PIN);
  
  Serial.println("\n===== ENERGY METER ESP32 DevKit V1 =====");
  Serial.println("Menggunakan PZEM-004T v3.0");
  Serial.printf("RX Pin: %d, TX Pin: %d\n", PZEM_RX_PIN, PZEM_TX_PIN);
  
  // Koneksi WiFi
  WiFi.begin(ssid, password);
  Serial.print("Menghubungkan ke WiFi ");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ Terhubung ke WiFi!");
  Serial.print("üì° IP Address: ");
  Serial.println(WiFi.localIP());

  // Setup server routes
  server.on("/", HTTP_GET, [](AsyncWebServerRequest* request) {
    Serial.println("üìÑ HTTP Request: /");
    request->send_P(200, "text/html", index_html);
  });

  server.on("/data", HTTP_GET, [](AsyncWebServerRequest* request) {
    Serial.println("üìä HTTP Request: /data");
    
    String json = "{";
    json += "\"voltage\":\"" + String(isnan(voltage) ? "0.0" : String(voltage, 1)) + "\",";
    json += "\"current\":\"" + String(isnan(current) ? "0.00" : String(current, 2)) + "\",";
    json += "\"power\":\"" + String(isnan(power) ? "0.0" : String(power, 1)) + "\",";
    json += "\"energy\":\"" + String(isnan(energy) ? "0.000" : String(energy, 3)) + "\",";
    json += "\"frequency\":\"" + String(isnan(frequency) ? "0.0" : String(frequency, 1)) + "\",";
    json += "\"pf\":\"" + String(isnan(pf) ? "0.00" : String(pf, 2)) + "\"";
    json += "}";
    
    request->send(200, "application/json", json);
  });

  // Start server
  server.begin();
  Serial.println("‚úÖ HTTP Server started!");
  Serial.println("=====================================");
}

void loop() {
  // Baca data dari PZEM
  voltage = pzem.voltage();
  current = pzem.current();
  power = pzem.power();
  energy = pzem.energy();
  frequency = pzem.frequency();
  pf = pzem.pf();

  // Print data ke Serial Monitor
  if(!isnan(voltage)) {
    Serial.printf("üìä Data Sensor: V=%.1fV, I=%.3fA, P=%.1fW, E=%.3fkWh, F=%.1fHz, PF=%.2f\n",
                  voltage, current, power, energy, frequency, pf);
  } else {
    Serial.println("‚ùå Error membaca sensor PZEM!");
  }

  delay(2000); // Update setiap 2 detik
}
